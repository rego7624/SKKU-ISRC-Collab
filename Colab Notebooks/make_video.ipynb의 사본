{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"make_video.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyN8xh7CY+aAfeSaP2nSNc37"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"_XsFLo1dYPeZ","colab_type":"code","colab":{}},"source":["#CTRL + Enter == 셀 실행\n","#Alt + Enter == 셀 실행 후 생성\n","#Shift + Enter == 셀 실행 후 다음 셀로 넘어감\n","\n","#스마트폰 촬영 시 가로캠으로 얼굴이 꽉차지 않게 찍는 것을 권장함"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TAPe0MvAoc8C","colab_type":"code","outputId":"5a5e4ac5-070e-451f-db33-8c4353f4d822","executionInfo":{"status":"ok","timestamp":1579333245092,"user_tz":-540,"elapsed":27627,"user":{"displayName":"my bicker","photoUrl":"","userId":"06111982675229710447"}},"colab":{"base_uri":"https://localhost:8080/","height":188}},"source":["from google.colab import drive\n","\n","drive.mount('/content/drive/', force_remount = True)\n","\n","\"\"\"\n","링크 클릭 후 뜨는 코드 붙여넣기\n","\"\"\""],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive/\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["'\\n링크 클릭 후 뜨는 코드 붙여넣기\\n'"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"code","metadata":{"id":"NNqrWW3PdoK-","colab_type":"code","outputId":"fdec3914-3d93-4415-fde9-87db1c75697b","executionInfo":{"status":"ok","timestamp":1579333484286,"user_tz":-540,"elapsed":235946,"user":{"displayName":"my bicker","photoUrl":"","userId":"06111982675229710447"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["#cd /content/drive/My\\ Drive/BICKER/ && pip install -r requirements.txt && python video_to_fake.py --face_file face/team1/xxx.avi --target_file targets/team1/xxx.jpg --fake_file fake/team1/xxx.avi\n","!cd /content/drive/My\\ Drive/BICKER/ && pip install -r requirements.txt && python video_to_fake.py --face_file face/team1/jaejun11.mp4 --target_file targets/team1/kcy2.jpg --fake_file fake/team1/jaejun11_to_kcy2_200118_1.avi\n","\n","\"\"\"\n","face_file: 얼굴 녹화 영상 폴더 및 이름(default: face/team1/junho.mp4)\n","target_file: 움직일 이미지 폴더 및 이름(default: targets/team1/oobama2.jpg)\n","fake_file: 저장할 딥페이크 영상 폴더 및 이름(default: fake/team1/junho_to_obama_200113_1.avi)\n","\n","\n","영상 제작 중 뜨는 메시지:\n","...\n","hello\n","1\n","(480, 480, 3)\n","<class 'numpy.ndarray'>\n","11\n","(374, 374, 3)\n","<class 'numpy.ndarray'>\n","(374, 374, 3)\n","3\n","(374, 374, 3)\n","hello\n","1\n","(480, 480, 3)\n","<class 'numpy.ndarray'>\n","11\n","(370, 370, 3)\n","...\n","\n","\n","영상 제작 완료 시 뜨는 메세지:\n","Traceback (most recent call last):\n","  File \"video_to_fake.py\", line 90, in <module>\n","    x, g_y, _ = extractFromImg2(x)\n","  File \"/content/drive/My Drive/BICKER/extract_from_img.py\", line 18, in extractFromImg2\n","    tar_lm = fa.get_landmarks(tar)[0]\n","  File \"/usr/local/lib/python3.6/dist-packages/face_alignment/api.py\", line 141, in get_landmarks\n","    return self.get_landmarks_from_image(image_or_path, detected_faces)\n","  File \"/usr/local/lib/python3.6/dist-packages/face_alignment/api.py\", line 171, in get_landmarks_from_image\n","    detected_faces = self.face_detector.detect_from_image(image[..., ::-1].copy())\n","IndexError: too many indices for array\n","\"\"\""],"execution_count":2,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: torch==1.3.1 in /usr/local/lib/python3.6/dist-packages (from -r requirements.txt (line 1)) (1.3.1)\n","Requirement already satisfied: torchvision==0.4.2 in /usr/local/lib/python3.6/dist-packages (from -r requirements.txt (line 2)) (0.4.2)\n","Collecting face-alignment==1.0.0\n","  Downloading https://files.pythonhosted.org/packages/20/86/26baa3888c254c9ce284702a1041cf9a533ad91c873b06f74d3cfa23aff7/face_alignment-1.0.0-py2.py3-none-any.whl\n","Requirement already satisfied: matplotlib==3.1.2 in /usr/local/lib/python3.6/dist-packages (from -r requirements.txt (line 4)) (3.1.2)\n","Requirement already satisfied: numpy==1.17.5 in /usr/local/lib/python3.6/dist-packages (from -r requirements.txt (line 5)) (1.17.5)\n","Requirement already satisfied: opencv-python==4.1.2.30 in /usr/local/lib/python3.6/dist-packages (from -r requirements.txt (line 6)) (4.1.2.30)\n","Requirement already satisfied: Pillow==6.2.2 in /usr/local/lib/python3.6/dist-packages (from -r requirements.txt (line 7)) (6.2.2)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from torchvision==0.4.2->-r requirements.txt (line 2)) (1.12.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from face-alignment==1.0.0->-r requirements.txt (line 3)) (4.28.1)\n","Requirement already satisfied: scipy>=0.17 in /usr/local/lib/python3.6/dist-packages (from face-alignment==1.0.0->-r requirements.txt (line 3)) (1.4.1)\n","Requirement already satisfied: scikit-image in /usr/local/lib/python3.6/dist-packages (from face-alignment==1.0.0->-r requirements.txt (line 3)) (0.16.2)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib==3.1.2->-r requirements.txt (line 4)) (2.6.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib==3.1.2->-r requirements.txt (line 4)) (1.1.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib==3.1.2->-r requirements.txt (line 4)) (2.4.6)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib==3.1.2->-r requirements.txt (line 4)) (0.10.0)\n","Requirement already satisfied: networkx>=2.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->face-alignment==1.0.0->-r requirements.txt (line 3)) (2.4)\n","Requirement already satisfied: PyWavelets>=0.4.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->face-alignment==1.0.0->-r requirements.txt (line 3)) (1.1.1)\n","Requirement already satisfied: imageio>=2.3.0 in /usr/local/lib/python3.6/dist-packages (from scikit-image->face-alignment==1.0.0->-r requirements.txt (line 3)) (2.4.1)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from kiwisolver>=1.0.1->matplotlib==3.1.2->-r requirements.txt (line 4)) (42.0.2)\n","Requirement already satisfied: decorator>=4.3.0 in /usr/local/lib/python3.6/dist-packages (from networkx>=2.0->scikit-image->face-alignment==1.0.0->-r requirements.txt (line 3)) (4.4.1)\n","Installing collected packages: face-alignment\n","Successfully installed face-alignment-1.0.0\n","PRESS Q TO EXIT\n","Downloading the face detection CNN. Please wait...\n","Downloading the Face Alignment Network(FAN). Please wait...\n","(256, 256, 3)\n","30.692112129999998\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1169, 1174, 3)\n","<class 'numpy.ndarray'>\n","(1169, 1174, 3)\n","3\n","(1169, 1174, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1172, 1180, 3)\n","<class 'numpy.ndarray'>\n","(1172, 1180, 3)\n","3\n","(1172, 1180, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1174, 1182, 3)\n","<class 'numpy.ndarray'>\n","(1174, 1182, 3)\n","3\n","(1174, 1182, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1181, 1190, 3)\n","<class 'numpy.ndarray'>\n","(1181, 1190, 3)\n","3\n","(1181, 1190, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1178, 1186, 3)\n","<class 'numpy.ndarray'>\n","(1178, 1186, 3)\n","3\n","(1178, 1186, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1188, 1204, 3)\n","<class 'numpy.ndarray'>\n","(1188, 1204, 3)\n","3\n","(1188, 1204, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1192, 1204, 3)\n","<class 'numpy.ndarray'>\n","(1192, 1204, 3)\n","3\n","(1192, 1204, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1194, 1220, 3)\n","<class 'numpy.ndarray'>\n","(1194, 1220, 3)\n","3\n","(1194, 1220, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1191, 1208, 3)\n","<class 'numpy.ndarray'>\n","(1191, 1208, 3)\n","3\n","(1191, 1208, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1195, 1218, 3)\n","<class 'numpy.ndarray'>\n","(1195, 1218, 3)\n","3\n","(1195, 1218, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1197, 1224, 3)\n","<class 'numpy.ndarray'>\n","(1197, 1224, 3)\n","3\n","(1197, 1224, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1189, 1212, 3)\n","<class 'numpy.ndarray'>\n","(1189, 1212, 3)\n","3\n","(1189, 1212, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1187, 1198, 3)\n","<class 'numpy.ndarray'>\n","(1187, 1198, 3)\n","3\n","(1187, 1198, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1183, 1184, 3)\n","<class 'numpy.ndarray'>\n","(1183, 1184, 3)\n","3\n","(1183, 1184, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1144, 1144, 3)\n","<class 'numpy.ndarray'>\n","(1144, 1144, 3)\n","3\n","(1144, 1144, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1096, 1096, 3)\n","<class 'numpy.ndarray'>\n","(1096, 1096, 3)\n","3\n","(1096, 1096, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1082, 1082, 3)\n","<class 'numpy.ndarray'>\n","(1082, 1082, 3)\n","3\n","(1082, 1082, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1056, 1056, 3)\n","<class 'numpy.ndarray'>\n","(1056, 1056, 3)\n","3\n","(1056, 1056, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1060, 1060, 3)\n","<class 'numpy.ndarray'>\n","(1060, 1060, 3)\n","3\n","(1060, 1060, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1040, 1040, 3)\n","<class 'numpy.ndarray'>\n","(1040, 1040, 3)\n","3\n","(1040, 1040, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1042, 1042, 3)\n","<class 'numpy.ndarray'>\n","(1042, 1042, 3)\n","3\n","(1042, 1042, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1028, 1028, 3)\n","<class 'numpy.ndarray'>\n","(1028, 1028, 3)\n","3\n","(1028, 1028, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1040, 1040, 3)\n","<class 'numpy.ndarray'>\n","(1040, 1040, 3)\n","3\n","(1040, 1040, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1032, 1032, 3)\n","<class 'numpy.ndarray'>\n","(1032, 1032, 3)\n","3\n","(1032, 1032, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1028, 1028, 3)\n","<class 'numpy.ndarray'>\n","(1028, 1028, 3)\n","3\n","(1028, 1028, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1052, 1052, 3)\n","<class 'numpy.ndarray'>\n","(1052, 1052, 3)\n","3\n","(1052, 1052, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1060, 1060, 3)\n","<class 'numpy.ndarray'>\n","(1060, 1060, 3)\n","3\n","(1060, 1060, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1080, 1080, 3)\n","<class 'numpy.ndarray'>\n","(1080, 1080, 3)\n","3\n","(1080, 1080, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1104, 1104, 3)\n","<class 'numpy.ndarray'>\n","(1104, 1104, 3)\n","3\n","(1104, 1104, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1134, 1134, 3)\n","<class 'numpy.ndarray'>\n","(1134, 1134, 3)\n","3\n","(1134, 1134, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1162, 1162, 3)\n","<class 'numpy.ndarray'>\n","(1162, 1162, 3)\n","3\n","(1162, 1162, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1178, 1178, 3)\n","<class 'numpy.ndarray'>\n","(1178, 1178, 3)\n","3\n","(1178, 1178, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1194, 1194, 3)\n","<class 'numpy.ndarray'>\n","(1194, 1194, 3)\n","3\n","(1194, 1194, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1200, 1202, 3)\n","<class 'numpy.ndarray'>\n","(1200, 1202, 3)\n","3\n","(1200, 1202, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1204, 1208, 3)\n","<class 'numpy.ndarray'>\n","(1204, 1208, 3)\n","3\n","(1204, 1208, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1207, 1212, 3)\n","<class 'numpy.ndarray'>\n","(1207, 1212, 3)\n","3\n","(1207, 1212, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1207, 1216, 3)\n","<class 'numpy.ndarray'>\n","(1207, 1216, 3)\n","3\n","(1207, 1216, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1207, 1210, 3)\n","<class 'numpy.ndarray'>\n","(1207, 1210, 3)\n","3\n","(1207, 1210, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1204, 1204, 3)\n","<class 'numpy.ndarray'>\n","(1204, 1204, 3)\n","3\n","(1204, 1204, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1204, 1204, 3)\n","<class 'numpy.ndarray'>\n","(1204, 1204, 3)\n","3\n","(1204, 1204, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1212, 1218, 3)\n","<class 'numpy.ndarray'>\n","(1212, 1218, 3)\n","3\n","(1212, 1218, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1209, 1216, 3)\n","<class 'numpy.ndarray'>\n","(1209, 1216, 3)\n","3\n","(1209, 1216, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1210, 1214, 3)\n","<class 'numpy.ndarray'>\n","(1210, 1214, 3)\n","3\n","(1210, 1214, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1215, 1226, 3)\n","<class 'numpy.ndarray'>\n","(1215, 1226, 3)\n","3\n","(1215, 1226, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1212, 1224, 3)\n","<class 'numpy.ndarray'>\n","(1212, 1224, 3)\n","3\n","(1212, 1224, 3)\n","hello\n","1\n","(1440, 2560, 3)\n","<class 'numpy.ndarray'>\n","11\n","(1202, 1202, 3)\n","<class 'numpy.ndarray'>\n","(1202, 1202, 3)\n","3\n","(1202, 1202, 3)\n","hello\n","Traceback (most recent call last):\n","  File \"video_to_fake.py\", line 90, in <module>\n","    x, g_y, _ = extractFromImg2(x)\n","  File \"/content/drive/My Drive/BICKER/extract_from_img.py\", line 13, in extractFromImg2\n","    fa = face_alignment.FaceAlignment(face_alignment.LandmarksType._2D, device='cuda')\n","  File \"/usr/local/lib/python3.6/dist-packages/face_alignment/api.py\", line 69, in __init__\n","    self.face_alignment_net = FAN(network_size)\n","  File \"/usr/local/lib/python3.6/dist-packages/face_alignment/models.py\", line 160, in __init__\n","    self.add_module('m' + str(hg_module), HourGlass(1, 4, 256))\n","  File \"/usr/local/lib/python3.6/dist-packages/face_alignment/models.py\", line 105, in __init__\n","    self._generate_network(self.depth)\n","  File \"/usr/local/lib/python3.6/dist-packages/face_alignment/models.py\", line 113, in _generate_network\n","    self._generate_network(level - 1)\n","  File \"/usr/local/lib/python3.6/dist-packages/face_alignment/models.py\", line 113, in _generate_network\n","    self._generate_network(level - 1)\n","  File \"/usr/local/lib/python3.6/dist-packages/face_alignment/models.py\", line 113, in _generate_network\n","    self._generate_network(level - 1)\n","  File \"/usr/local/lib/python3.6/dist-packages/face_alignment/models.py\", line 117, in _generate_network\n","    self.add_module('b3_' + str(level), ConvBlock(self.features, self.features))\n","  File \"/usr/local/lib/python3.6/dist-packages/face_alignment/models.py\", line 17, in __init__\n","    self.conv1 = conv3x3(in_planes, int(out_planes / 2))\n","  File \"/usr/local/lib/python3.6/dist-packages/face_alignment/models.py\", line 10, in conv3x3\n","    stride=strd, padding=padding, bias=bias)\n","  File \"/usr/local/lib/python3.6/dist-packages/torch/nn/modules/conv.py\", line 332, in __init__\n","    False, _pair(0), groups, bias, padding_mode)\n","  File \"/usr/local/lib/python3.6/dist-packages/torch/nn/modules/conv.py\", line 46, in __init__\n","    self.reset_parameters()\n","  File \"/usr/local/lib/python3.6/dist-packages/torch/nn/modules/conv.py\", line 49, in reset_parameters\n","    init.kaiming_uniform_(self.weight, a=math.sqrt(5))\n","  File \"/usr/local/lib/python3.6/dist-packages/torch/nn/init.py\", line 319, in kaiming_uniform_\n","    return tensor.uniform_(-bound, bound)\n","KeyboardInterrupt\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["'\\nface_file: 얼굴 녹화 영상 폴더 및 이름(default: face/team1/junho.mp4)\\ntarget_file: 움직일 이미지 폴더 및 이름(default: targets/team1/oobama2.jpg)\\nfake_file: 저장할 딥페이크 영상 폴더 및 이름(default: fake/team1/junho_to_obama_200113_1.avi)\\n\\n\\n영상 제작 중 뜨는 메시지:\\n...\\nhello\\n1\\n(480, 480, 3)\\n<class \\'numpy.ndarray\\'>\\n11\\n(374, 374, 3)\\n<class \\'numpy.ndarray\\'>\\n(374, 374, 3)\\n3\\n(374, 374, 3)\\nhello\\n1\\n(480, 480, 3)\\n<class \\'numpy.ndarray\\'>\\n11\\n(370, 370, 3)\\n...\\n\\n\\n영상 제작 완료 시 뜨는 메세지:\\nTraceback (most recent call last):\\n  File \"video_to_fake.py\", line 90, in <module>\\n    x, g_y, _ = extractFromImg2(x)\\n  File \"/content/drive/My Drive/BICKER/extract_from_img.py\", line 18, in extractFromImg2\\n    tar_lm = fa.get_landmarks(tar)[0]\\n  File \"/usr/local/lib/python3.6/dist-packages/face_alignment/api.py\", line 141, in get_landmarks\\n    return self.get_landmarks_from_image(image_or_path, detected_faces)\\n  File \"/usr/local/lib/python3.6/dist-packages/face_alignment/api.py\", line 171, in get_landmarks_from_image\\n    detected_faces = self.face_detector.detect_from_image(image[..., ::-1].copy())\\nIndexError: too many indices for array\\n'"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"Jwj6KX1-u6Yp","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}